datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  communities Community[]
  members Member[]
  trades Trade[]
  services Service[]
}

model Community {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  trades Trade[]
  services Service[]

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  TRADER
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([communityId])
}

model Trade {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  services Service[]

  @@index([profileId])
  @@index([communityId])
}

model Service {
  id String @id @default(uuid())
  name String
  author String
  details String
  price Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  tradeId String
  trade Trade @relation(fields: [tradeId], references: [id])

  communityId String
  community Community @relation(fields: [communityId], references: [id])

  images Image[]

  @@index([profileId])
  @@index([tradeId])
  @@index([communityId])
}

model Image {
  id String @id @default(uuid())
  serviceId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serviceId])
}